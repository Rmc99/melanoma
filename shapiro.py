import numpy as np
import scipy.stats as stats
import pandas as pd

# Resultados dos modelos (já fornecidos)
ensemble_results = {
    'Accuracy': [0.7872340425531915, 0.7819148936170213, 0.8138297872340425, 0.7819148936170213, 0.8031914893617021,
                 0.8138297872340425, 0.8085106382978723, 0.8085106382978723, 0.7978723404255319, 0.824468085106383,
                 0.7127659574468085, 0.8297872340425532, 0.8085106382978723, 0.75, 0.8404255319148937,
                 0.7978723404255319, 0.824468085106383, 0.8138297872340425, 0.7978723404255319, 0.7606382978723404,
                 0.8138297872340425, 0.675531914893617, 0.7978723404255319, 0.7978723404255319, 0.8297872340425532,
                 0.8031914893617021, 0.824468085106383, 0.8031914893617021, 0.8138297872340425, 0.8085106382978723],
    'Precision': [0.8852459016393442, 0.9791666666666666, 0.8421052631578947, 0.9259259259259259, 0.9032258064516129,
                  0.9642857142857143, 1.0, 1.0, 0.7474747474747475, 0.7872340425531915,
                  0.6542056074766355, 0.9824561403508771, 0.8493150684931506, 1.0, 0.9830508474576272,
                  0.8024691358024691, 0.9655172413793104, 0.90625, 0.8356164383561644, 0.9772727272727273,
                  0.76, 1.0, 0.9454545454545454, 0.7578947368421053, 0.9824561403508771,
                  1.0, 0.9821428571428571, 0.9807692307692307, 1.0, 0.9473684210526315],
    'Recall': [0.6206896551724138, 0.5402298850574713, 0.735632183908046, 0.5747126436781609, 0.6436781609195402,
               0.6206896551724138, 0.5862068965517241, 0.5862068965517241, 0.8505747126436781, 0.8505747126436781,
               0.8045977011494253, 0.6436781609195402, 0.7126436781609196, 0.45977011494252873, 0.6666666666666666,
               0.7471264367816092, 0.6436781609195402, 0.6666666666666666, 0.7011494252873564, 0.4942528735632184,
               0.8735632183908046, 0.2988505747126437, 0.5977011494252874, 0.8275862068965517, 0.6436781609195402,
               0.5747126436781609, 0.632183908045977, 0.5862068965517241, 0.5977011494252874, 0.6206896551724138],
    'F1-Score': [0.7297297297297297, 0.6962962962962963, 0.7852760736196319, 0.7092198581560284, 0.7516778523489933,
                 0.7552447552447552, 0.7391304347826086, 0.7391304347826086, 0.7956989247311828, 0.8176795580110497,
                 0.7216494845360825, 0.7777777777777778, 0.775, 0.6299212598425197, 0.7945205479452054,
                 0.7738095238095238, 0.7724137931034483, 0.7682119205298014, 0.7625, 0.6564885496183206,
                 0.8128342245989305, 0.46017699115044247, 0.7323943661971831, 0.7912087912087912, 0.7777777777777778,
                 0.7299270072992701, 0.7692307692307693, 0.7338129496402878, 0.7482014388489209, 0.75]
}

cnn_results = {
    'Accuracy': [0.8085106382978723, 0.7925531914893617, 0.8351063829787234, 0.7978723404255319, 0.7712765957446809,
                 0.824468085106383, 0.8191489361702128, 0.7819148936170213, 0.8297872340425532, 0.824468085106383,
                 0.8031914893617021, 0.8138297872340425, 0.8191489361702128, 0.8191489361702128, 0.8191489361702128,
                 0.8085106382978723, 0.8085106382978723, 0.8297872340425532, 0.8031914893617021, 0.8085106382978723,
                 0.8351063829787234, 0.8191489361702128, 0.7925531914893617, 0.8138297872340425, 0.8031914893617021,
                 0.7872340425531915, 0.8191489361702128, 0.8085106382978723, 0.8297872340425532, 0.7925531914893617],
    'Precision': [0.9811320754716981, 0.875, 0.8589743589743589, 0.9298245614035088, 1.0,
                  0.9655172413793104, 0.9076923076923077, 0.7738095238095238, 0.9661016949152542, 0.9821428571428571,
                  0.9807692307692307, 0.7407407407407407, 0.9818181818181818, 0.9649122807017544, 0.9649122807017544,
                  0.9636363636363636, 1.0, 0.8571428571428571, 0.8205128205128205, 0.9473684210526315,
                  0.9516129032258065, 0.9818181818181818, 0.98, 0.9642857142857143, 1.0,
                  0.8051948051948052, 0.9649122807017544, 0.9811320754716981, 0.9508196721311475, 0.9],
    'Recall': [0.5977011494252874, 0.6436781609195402, 0.7701149425287356, 0.6091954022988506, 0.5057471264367817,
               0.6436781609195402, 0.6781609195402298, 0.7471264367816092, 0.6551724137931034, 0.632183908045977,
               0.5862068965517241, 0.9195402298850575, 0.6206896551724138, 0.632183908045977, 0.632183908045977,
               0.6091954022988506, 0.5862068965517241, 0.7586206896551724, 0.735632183908046, 0.6206896551724138,
               0.6781609195402298, 0.6190476190476191, 0.5663716814159292, 0.6666666666666666, 0.6744186046511628,
               0.6781609195402298, 0.7209302325581395, 0.6530612244897959, 0.7209302325581395, 0.7594936708860759],
    'F1-Score': [0.7435897435897436, 0.8108108108108109, 0.7931034482758621, 0.8321678321678322, 0.7634408602150538,
                 0.816420116523942, 0.8243243243243243, 0.8064516129032258, 0.7912087912087912, 0.8085106382978723,
                 0.8055555555555556, 0.7777777777777778, 0.7888888888888889, 0.7909090909090909, 0.7909090909090909,
                 0.7368421052631579, 0.7909090909090909, 0.7945205479452054, 0.7666666666666666, 0.7721518987341772,
                 0.7666666666666666, 0.8175182481751825, 0.7666666666666666, 0.7735849056603774, 0.7872340425531915,
                 0.7049180327868853, 0.8000000000000000, 0.7931034482758621, 0.8222222222222222, 0.7419354838709677]
}


# Função para realizar o teste de Shapiro-Wilk e verificar normalidade
def shapiro_test(data):
    _, p_value = stats.shapiro(data)
    return p_value


# Convertendo para DataFrame para fácil manipulação
ensemble_df = pd.DataFrame(ensemble_results)
cnn_df = pd.DataFrame(cnn_results)

# Realizando o teste Shapiro-Wilk para cada métrica de ambos os modelos
results = {}
for metric in ensemble_results.keys():
    ensemble_p_value = shapiro_test(ensemble_df[metric])
    cnn_p_value = shapiro_test(cnn_df[metric])

    ensemble_normality = 'Normal' if ensemble_p_value > 0.05 else 'Non-Normal'
    cnn_normality = 'Normal' if cnn_p_value > 0.05 else 'Non-Normal'

    results[metric] = {
        'Ensemble p-value': ensemble_p_value,
        'Ensemble Normality': ensemble_normality,
        'CNN p-value': cnn_p_value,
        'CNN Normality': cnn_normality
    }

# Exibindo os resultados
results_df = pd.DataFrame(results)
print(results_df)
