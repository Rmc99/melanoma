import numpy as np
import scipy.stats as stats
import pandas as pd

# Resultados dos modelos (já fornecidos)
ensemble_results = {
    'Accuracy': [0.8053191489361702,
0.7936170212765958,
0.7946808510638298,
0.8223404255319149,
0.7936170212765957,
0.7861702127659574,
0.8095744680851065,
0.801063829787234,
0.8074468085106383,
0.7882978723404256,
0.7861702127659574,
0.8191489361702129,
0.8127659574468085,
0.7872340425531915,
0.7882978723404255,
0.824468085106383,
0.798936170212766,
0.7978723404255319,
0.8074468085106383,
0.7914893617021277,
0.7808510638297872,
0.8265957446808511,
0.7840425531914894,
0.7829787234042553,
0.8148936170212766,
0.7957446808510638,
0.7872340425531915,
0.7776595744680851,
0.827659574468085,
0.8085106382978724,
],
    'Precision': [0.8977891404326985,
0.9279375696767002,
0.9507379668023814,
0.9733918887713319,
0.894034891764452,
0.7785786097100886,
0.8580391653902361,
0.9162821219518598,
0.8747031038138552,
0.9040153608494158,
0.9198662945414423,
0.9029014293864265,
0.8952160439893289,
0.8498568032735662,
0.9612216139509975,
0.8850584236978515,
0.8490589500571353,
0.8607819620842578,
0.9169779917702765,
0.9345449067809163,
0.9062007026778289,
0.9287034619259682,
0.8651513690228896,
0.9189588189588191,
0.8941407194161408,
0.903715384854998,
0.9033095376845377,
0.9277525710828796,
0.8949367878188532,
0.9305840771358934,
],
    'Recall': [0.6666666666666667,
0.6137931034482758,
0.5885057471264368,
0.6344827586206897,
0.6344827586206897,
0.7908045977011493,
0.7172413793103448,
0.6436781609195403,
0.6965517241379311,
0.6275862068965516,
0.6022988505747127,
0.6873563218390805,
0.6827586206896552,
0.6735632183908046,
0.5701149425287356,
0.7310344827586206,
0.6942528735632185,
0.7379310344827587,
0.6436781609195401,
0.5977011494252873,
0.6252873563218391,
0.6850574712643678,
0.6459770114942528,
0.6114942528735632,
0.6942528735632184,
0.6459770114942529,
0.6229885057471265,
0.5724137931034483,
0.710344827586207,
0.6413793103448275,
],
    'F1-Score': [0.7556581073741201,
0.7258504490205837,
0.7209724302669301,
0.7646037928710339,
0.738349075570129,
0.7700706481422979,
0.7757556035006564,
0.7503838258249715,
0.766364789826437,
0.7306991272004834,
0.7185046889092009,
0.7769881955460682,
0.7709552402277858,
0.7333323358792792,
0.707022253364354,
0.7914753319816611,
0.756151009693073,
0.7724390024265804,
0.7551560806836666,
0.7216603353544531,
0.7178219696969697,
0.7847146474091673,
0.7285148545575737,
0.7147859757777484,
0.7725352839248159,
0.7408019430910114,
0.7269398145005962,
0.7012787155154431,
0.7911523023094792,
0.7527556030792173,
]
}

cnn_results = {
    'Accuracy': [0.8127659574468085,
0.7893617021276595,
0.7978723404255319,
0.7872340425531915,
0.778723404255319,
0.8148936170212766,
0.824468085106383,
0.8106382978723404,
0.8202127659574469,
0.8063829787234041,
0.8191489361702127,
0.8202127659574469,
0.8138297872340425,
0.8095744680851062,
0.7819148936170212,
0.8127659574468084,
0.7840425531914894,
0.8212765957446809,
0.8063829787234044,
0.8265957446808511,
0.8085106382978724,
0.803191489361702,
0.7872340425531915,
0.7861702127659573,
0.8138297872340425,
0.7904255319148936,
0.8223404255319149,
0.8085106382978724,
0.8127659574468085,
0.798936170212766,
],
    'Precision': [0.9407203907203907,
0.9246931361927219,
0.8941228358978499,
0.8952488929337399,
0.8833988046710346,
0.8635180590019299,
0.9309969907344804,
0.9204670694705241,
0.9143699788832919,
0.9245613637277957,
0.9107328913591406,
0.9189334018147577,
0.8884101620718354,
0.9330940390728241,
0.9292469429535771,
0.9380227394202352,
0.8891994784876142,
0.9120036959895451,
0.9487355670525786,
0.9075207511556815,
0.9489048895317508,
0.8937694487422423,
0.9048319859209151,
0.9126342447225302,
0.9508095950694264,
0.9501893287435456,
0.8784196347179506,
0.875255626622722,
0.8400724262014745,
0.9597290327267445,
],
    'Recall': [0.6413793103448275,
0.6114942528735632,
0.6735632183908047,
0.6275862068965516,
0.6229885057471265,
0.728735632183908,
0.6758620689655173,
0.6620689655172414,
0.6827586206896552,
0.6413793103448275,
0.6804597701149426,
0.6735632183908045,
0.7011494252873562,
0.639080459770115,
0.593103448275862,
0.639080459770115,
0.639080459770115,
0.6873563218390804,
0.6206896551724138,
0.7034482758620689,
0.6252873563218391,
0.6988505747126437,
0.6413793103448275,
0.6022988505747127,
0.6344827586206897,
0.5908045977011495,
0.7218390804597701,
0.7126436781609196,
0.7632183908045976,
0.5931034482758621,
],
    'F1-Score': [0.7556973885345627,
0.7165170795551787,
0.7513316462212518,
0.7280518880037725,
0.7201951609977099,
0.7840221598245415,
0.779267370253905,
0.7605308892654655,
0.7728047931548592,
0.7531285272611277,
0.7765771178477732,
0.7763743832330899,
0.7743909511407406,
0.755610966046995,
0.7081766585174127,
0.7595489515470828,
0.7257018735886877,
0.7799709475132325,
0.7461730713085167,
0.7888195800687535,
0.7464620564620564,
0.7651814555120182,
0.7328724052444724,
0.7195121719824448,
0.75530328150212,
0.7034396411979185,
0.7884404982654932,
0.7730393874715572,
0.789558021127517,
0.7312855880708966,
]
}

# Função para realizar o teste de Shapiro-Wilk e verificar normalidade
def shapiro_test(data):
    _, p_value = stats.shapiro(data)
    return p_value


# Convertendo para DataFrame para fácil manipulação
ensemble_df = pd.DataFrame(ensemble_results)
cnn_df = pd.DataFrame(cnn_results)

# Realizando o teste Shapiro-Wilk para cada métrica de ambos os modelos
results = {}
for metric in ensemble_results.keys():
    ensemble_p_value = shapiro_test(ensemble_df[metric])
    cnn_p_value = shapiro_test(cnn_df[metric])

    ensemble_normality = 'Normal' if ensemble_p_value > 0.05 else 'Non-Normal'
    cnn_normality = 'Normal' if cnn_p_value > 0.05 else 'Non-Normal'

    results[metric] = {
        'Ensemble p-value': ensemble_p_value,
        'Ensemble Normality': ensemble_normality,
        'CNN p-value': cnn_p_value,
        'CNN Normality': cnn_normality
    }

# Exibindo os resultados
results_df = pd.DataFrame(results)
print(results_df)
