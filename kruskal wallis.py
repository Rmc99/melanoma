# Importação das bibliotecas necessárias
import pandas as pd
from scipy.stats import kruskal

# Resultados do modelo Ensemble (valores fornecidos)
ensemble_results = {
    'Accuracy': [0.7872340425531915, 0.7819148936170213, 0.8138297872340425, 0.7819148936170213, 0.8031914893617021,
                 0.8138297872340425, 0.8085106382978723, 0.8085106382978723, 0.7978723404255319, 0.824468085106383,
                 0.7127659574468085, 0.8297872340425532, 0.8085106382978723, 0.75, 0.8404255319148937,
                 0.7978723404255319, 0.824468085106383, 0.8138297872340425, 0.7978723404255319, 0.7606382978723404,
                 0.8138297872340425, 0.675531914893617, 0.7978723404255319, 0.7978723404255319, 0.8297872340425532,
                 0.8031914893617021, 0.824468085106383, 0.8031914893617021, 0.8138297872340425, 0.8085106382978723
                 ],
    'Precision': [0.8852459016393442,0.9791666666666666, 0.8421052631578947, 0.9259259259259259, 0.9032258064516129,
                  0.9642857142857143,1.0,                1.0,                0.7474747474747475, 0.7872340425531915,
                  0.6542056074766355,0.9824561403508771, 0.8493150684931506, 1.0,                0.9830508474576272,
                  0.8024691358024691,0.9655172413793104, 0.90625,            0.8356164383561644, 0.9772727272727273,
                  0.76,              1.0,                0.9454545454545454, 0.7578947368421053, 0.9824561403508771,
                  1.0,               0.9821428571428571, 0.9807692307692307, 1.0,                0.9473684210526315
                  ],
    'Recall': [0.6206896551724138,   0.5402298850574713, 0.735632183908046,  0.5747126436781609, 0.6436781609195402,
               0.6206896551724138,   0.5862068965517241, 0.5862068965517241, 0.8505747126436781, 0.8505747126436781,
               0.8045977011494253,   0.6436781609195402, 0.7126436781609196, 0.45977011494252873,0.6666666666666666,
               0.7471264367816092,   0.6436781609195402, 0.6666666666666666, 0.7011494252873564, 0.4942528735632184,
               0.8735632183908046,   0.2988505747126437, 0.5977011494252874, 0.8275862068965517, 0.6436781609195402,
               0.5747126436781609,   0.632183908045977,  0.5862068965517241, 0.5977011494252874, 0.6206896551724138
               ],
    'F1-Score': [0.7297297297297297, 0.6962962962962963, 0.7852760736196319, 0.7092198581560284, 0.7516778523489933,
                 0.7552447552447552, 0.7391304347826086, 0.7391304347826086, 0.7956989247311828, 0.8176795580110497,
                 0.7216494845360825, 0.7777777777777778, 0.775,              0.6299212598425197, 0.7945205479452054,
                 0.7738095238095238, 0.7724137931034483, 0.7682119205298014, 0.7625,             0.6564885496183206,
                 0.8128342245989305, 0.46017699115044247,0.7323943661971831, 0.7912087912087912, 0.7777777777777778,
                 0.7299270072992701, 0.7692307692307693, 0.7338129496402878, 0.7482014388489209, 0.75
                 ]
}

# Resultados do modelo CNN (valores fornecidos)
cnn_results = {
    'Accuracy': [0.8085106382978723, 0.7925531914893617, 0.8351063829787234, 0.7978723404255319, 0.7712765957446809,
                 0.824468085106383,  0.8191489361702128, 0.7819148936170213, 0.8297872340425532, 0.824468085106383,
                 0.8031914893617021, 0.8138297872340425, 0.8191489361702128, 0.8191489361702128, 0.8191489361702128,
                 0.8085106382978723, 0.8085106382978723, 0.8297872340425532, 0.8031914893617021, 0.8085106382978723,
                 0.8351063829787234, 0.8191489361702128, 0.7925531914893617, 0.8138297872340425, 0.8031914893617021,
                 0.7872340425531915, 0.8191489361702128, 0.8085106382978723, 0.8297872340425532, 0.7925531914893617],

    'Precision': [0.9811320754716981, 0.875,             0.8589743589743589, 0.9298245614035088, 1.0,
                  0.9655172413793104,0.9076923076923077, 0.7738095238095238, 0.9661016949152542, 0.9821428571428571,
                  0.9807692307692307, 0.7407407407407407,0.9818181818181818, 0.9649122807017544, 0.9649122807017544,
                  0.9636363636363636, 1.0,               0.8571428571428571, 0.8205128205128205, 0.9473684210526315,
                  0.9516129032258065, 0.9818181818181818,0.98,               0.9642857142857143, 1.0,
                  0.8051948051948052,0.9649122807017544, 0.9811320754716981, 0.9508196721311475, 0.9
                  ],

    'Recall': [ 0.5977011494252874, 0.6436781609195402,  0.7701149425287356, 0.6091954022988506, 0.5057471264367817,
                0.6436781609195402, 0.6781609195402298,  0.7471264367816092, 0.6551724137931034, 0.632183908045977,
                0.5862068965517241, 0.9195402298850575,  0.6206896551724138, 0.632183908045977,  0.632183908045977,
                0.6091954022988506, 0.5862068965517241,  0.7586206896551724, 0.735632183908046,  0.6206896551724138,
                0.6781609195402298, 0.6206896551724138,  0.5632183908045977, 0.6206896551724138, 0.5747126436781609,
                0.7126436781609196, 0.632183908045977,   0.5977011494252874, 0.6666666666666666, 0.6206896551724138
                ],

    'F1-Score': [ 0.7428571428571429, 0.782608695652174, 0.813953488372093,   0.7837837837837838, 0.8214285714285714,
                  0.7575757575757576, 0.7945205479452054,0.7631578947368421,  0.8571428571428571, 0.7894736842105263,
                  0.8333333333333333, 0.8241758241758242,0.813953488372093,   0.8539325842696629, 0.8644067796610169,
                  0.8543689320388349, 0.813953488372093, 0.8205128205128205,  0.8045977011494253, 0.75,
                  0.7741935483870968, 0.8846153846153846,0.8873239436619718,  0.8589743589743589, 0.8502202643171807,
                  0.875,              0.7837837837837838,0.8181818181818182,  0.875,              0.7741935483870968
                  ]
}

# Convertendo os resultados para DataFrames
ensemble_df = pd.DataFrame(ensemble_results)
cnn_df = pd.DataFrame(cnn_results)

# Função para calcular o teste de Kruskal-Wallis
def kruskal_test(ensemble_col, cnn_col):
    stat, p = kruskal(ensemble_col, cnn_col)
    return stat, p


# Comparando os modelos para todas as métricas
metrics = ['Accuracy', 'Precision', 'Recall', 'F1-Score']
results = {}

for metric in metrics:
    stat, p_value = kruskal_test(ensemble_df[metric], cnn_df[metric])

    # Interpretação do valor p
    if p_value < 0.05:
        significance = "Há uma diferença " + metric
    else:
        significance = "Não há diferença " + metric

    results[metric] = {
        'Statistic': stat,
        'P-Value': p_value,
        'Interpretation': significance
    }

# Exibindo os resultados
results_df = pd.DataFrame(results).T
print(results_df)

